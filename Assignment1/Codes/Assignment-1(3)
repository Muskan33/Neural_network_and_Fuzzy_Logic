{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Assignment-1(3)","provenance":[],"authorship_tag":"ABX9TyNhJeIaOTxOnoX26nQ/3Mp4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s869WvZ5qjKR","executionInfo":{"status":"ok","timestamp":1634060773970,"user_tz":-330,"elapsed":548,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"ca06362c-2473-490b-c7ab-8e0f4e7fc7fc"},"source":["import pandas as pd\n","import math\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split\n","df = pd.read_excel (r'/content/data_q2_q3.xlsx')\n","print(df)"],"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["     Feat1  Feat2  Feat3  Feat4  Output\n","0    0.195  0.025    1.5   4.97     2.2\n","1    0.195  0.025    2.0   4.97     2.2\n","2    0.195  0.025    3.0   4.97     2.2\n","3    0.195  0.025    4.0   4.97     2.2\n","4    0.195  0.125    1.5   4.97     2.2\n","..     ...    ...    ...    ...     ...\n","110  0.180  0.125    1.5   4.40     2.2\n","111  0.180  0.125    2.0   4.40     2.2\n","112  0.180  0.125    3.0   4.40     2.2\n","113  0.180  0.125    4.0   4.40     2.2\n","114  0.180  0.125    5.0   4.40     2.2\n","\n","[115 rows x 5 columns]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M_OXcKuErE3f","executionInfo":{"status":"ok","timestamp":1634060774863,"user_tz":-330,"elapsed":38,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"77ba5f16-9751-4e9f-997e-debc9e42cf17"},"source":["#Defining Independent Variables(X) and Dependent Variables(Y)\n","\n","data = df.values\n","X=data[:,[0,1,2,3]]\n","y=data[:,4]\n","y[:10]"],"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 2.3])"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K8dSo5w6rE00","executionInfo":{"status":"ok","timestamp":1634060774864,"user_tz":-330,"elapsed":29,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"917c1955-718b-4795-e01c-ced7128e0bcc"},"source":["x_train, x_left, y_train, y_left = train_test_split(X,y, train_size=0.7, random_state=50)\n","x_test, x_valid, y_test, y_valid = train_test_split(x_left, y_left, train_size=0.6666, random_state=50)\n","\n","x_valid[:5]\n","\n"],"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.245, 0.025, 1.5  , 5.74 ],\n","       [0.125, 0.125, 2.   , 5.74 ],\n","       [0.235, 0.125, 1.5  , 4.21 ],\n","       [0.13 , 0.025, 5.   , 4.21 ],\n","       [0.18 , 0.125, 5.   , 4.4  ]])"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","metadata":{"id":"NoEaFNNErEyO","executionInfo":{"status":"ok","timestamp":1634060774865,"user_tz":-330,"elapsed":22,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}}},"source":["#Data Normalization\n","\n","x_min = np.min(x_train, axis = 0)\n","x_max = np.max(x_train, axis = 0)\n","x_train = (x_train- x_min)/(x_max-x_min)\n","x_test = (x_test- x_min)/(x_max-x_min)\n","x_valid = (x_valid- x_min)/(x_max-x_min)\n","x_valid[:5]\n","\n","y_min = np.min(y_train, axis = 0)\n","y_max = np.max(y_train, axis = 0)\n","y_train = (y_train- y_min)/(y_max-y_min)\n","y_test = (y_test- y_min)/(y_max-y_min)\n","y_valid = (y_valid- y_min)/(y_max-y_min)\n","y_train[:10]\n","\n","#Initializing the first column of X with 1 and the weights\n","\n","x_train = np.append(np.ones([y_train.shape[0], 1]),x_train, axis=1)\n","w = np.random.rand(x_train.shape[1])\n","w\n","\n","x_train[:5]\n","\n","x_valid = np.append(np.ones([y_valid.shape[0], 1]),x_valid, axis=1)\n","x_test = np.append(np.ones([y_test.shape[0], 1]),x_test, axis=1)\n"],"execution_count":45,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"gILmW4kYrEvo","executionInfo":{"status":"ok","timestamp":1634060774875,"user_tz":-330,"elapsed":30,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"4c365205-2048-4266-87e3-803e65285e38"},"source":["###Implementing Batch Gradient Descent with Least Angle Regression\n","\n","def leastangle_regression_bgd(w, X, y, alpha=0.01, lambda_val=1, epochs=1000):\n"," \n","    # stores the updates on the cost function (loss function)\n","    cost_hist_list = []\n","    m =y.shape[0]\n","    # iterate until the maximum number of epochs\n","    for current_iteration in np.arange(epochs):  # begin the process\n","\n","        # compute the dot product between our feature 'X' and weight 'W'\n","        hypothesis = np.dot(X,w.T)\n","\n","        # calculate the difference between the actual and predicted value\n","        error = hypothesis - y\n","        \n","        # regularization term\n","        la_reg_term = (lambda_val / (2 * m)) * np.sum(np.abs(w))\n"," \n","        # calculate the cost (MSE) + regularization term\n","        J = (1 / (2 * m)) * np.sum(error ** 2) + la_reg_term\n"," \n","        # Update our gradient by the dot product between\n","        # the transpose of 'X' and our error + lambda value * W\n","        # divided by the total number of samples\n","        gradient = (1 / m) * (X.T.dot(error) + (lambda_val/2 * np.sign(w)))\n"," \n","        # Now we have to update our weights\n","        w = w - alpha * gradient\n"," \n","        # keep track the cost as it changes in each iteration\n","        cost_hist_list.append(J)\n"," \n","    return w, cost_hist_list\n","\n","\n","w_bgd_L1, cost_hist_list = leastangle_regression_bgd(w, x_train, y_train)\n","cost_hist_list[999]\n","\n","plt.plot(range(1000),cost_hist_list)\n","plt.show()\n"],"execution_count":46,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D4VzRjpMs0BB","executionInfo":{"status":"ok","timestamp":1634060775416,"user_tz":-330,"elapsed":563,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"c706237b-71b1-4e6f-ee72-cff121f031d4"},"source":["#Implementing Grid Search for Hyperparameter Tuning\n","\n","def grid_search_L1bgd(w,X,y):\n","    alpha = [0.01, 0.05,0.1,0.15, 0.5]\n","    lambda_val = [0.05, 0.1, 0.5, 1, 2]\n","    min_w = [0, 0, 0, 0, 0]\n","    min_MSE = 2\n","    for alpha in alpha:\n","        for j in lambda_val:\n","            w_temp,J_temp = leastangle_regression_bgd(w, X, y, alpha, j)\n","            m =y.shape[0]\n","\n","            hypothesis = np.dot(X,w_temp.T)\n","            error = hypothesis - y\n","            \n","            MSE = (1 / (2 * m)) * np.sum(error ** 2)\n","            if min_MSE > MSE :\n","                min_MSE = MSE\n","                min_w = w_temp\n","            print(\"MSE for alpha : \"+str(alpha)+\" and lambda : \"+str(j)+\" is = \"+str(MSE))\n","            #print(\"J for alpha : \"+str(alpha)+\" is = \"+str(J_temp[999]))\n","    return min_w, min_MSE    \n","\n","opti_w,opti_MSE = grid_search_L1bgd(w_bgd_L1,x_valid,y_valid)\n","\n","opti_w\n","\n","y_pred = np.dot(x_test,opti_w.T)"],"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["MSE for alpha : 0.01 and lambda : 0.05 is = 0.022464884947115727\n","MSE for alpha : 0.01 and lambda : 0.1 is = 0.022698388814224375\n","MSE for alpha : 0.01 and lambda : 0.5 is = 0.025145290358381173\n","MSE for alpha : 0.01 and lambda : 1 is = 0.02958432023065071\n","MSE for alpha : 0.01 and lambda : 2 is = 0.03686281110223574\n","MSE for alpha : 0.05 and lambda : 0.05 is = 0.014948179144527448\n","MSE for alpha : 0.05 and lambda : 0.1 is = 0.016155603159950627\n","MSE for alpha : 0.05 and lambda : 0.5 is = 0.020928225594464896\n","MSE for alpha : 0.05 and lambda : 1 is = 0.029892274104895214\n","MSE for alpha : 0.05 and lambda : 2 is = 0.03852296723707659\n","MSE for alpha : 0.1 and lambda : 0.05 is = 0.012560629232920633\n","MSE for alpha : 0.1 and lambda : 0.1 is = 0.014238278325157694\n","MSE for alpha : 0.1 and lambda : 0.5 is = 0.019229512096664125\n","MSE for alpha : 0.1 and lambda : 1 is = 0.029175316766089664\n","MSE for alpha : 0.1 and lambda : 2 is = 0.03869806249186926\n","MSE for alpha : 0.15 and lambda : 0.05 is = 0.011860689653248314\n","MSE for alpha : 0.15 and lambda : 0.1 is = 0.013547398469186832\n","MSE for alpha : 0.15 and lambda : 0.5 is = 0.01929712509811657\n","MSE for alpha : 0.15 and lambda : 1 is = 0.029313986247343247\n","MSE for alpha : 0.15 and lambda : 2 is = 0.03897007722925578\n","MSE for alpha : 0.5 and lambda : 0.05 is = 0.011465083267261506\n","MSE for alpha : 0.5 and lambda : 0.1 is = 0.013083199172834023\n","MSE for alpha : 0.5 and lambda : 0.5 is = 0.019419107643822535\n","MSE for alpha : 0.5 and lambda : 1 is = 0.028204811932358704\n","MSE for alpha : 0.5 and lambda : 2 is = 0.037266562093688615\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BfaTfXQHszkn","executionInfo":{"status":"ok","timestamp":1634060775418,"user_tz":-330,"elapsed":19,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"ad333de5-b7c4-49c3-a75d-b78957c99264"},"source":["#Unnormalize the test and predicted values to compare.\n","y_pred_un = y_pred * (y_max - y_min) + y_min\n","y_test_un = y_test * (y_max - y_min) + y_min\n","error = y_pred_un - y_test_un\n","MSE = (1 / (2 * y_test.shape[0])) * np.sum(error ** 2)\n","MAE = (1 / (2 * y_test.shape[0])) * np.sum(abs(error))\n","print(\"MSE = \"+str(MSE))\n","print(\"MAE = \"+str(MAE))"],"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["MSE = 0.13185917628641922\n","MAE = 0.2047041719554318\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K79jB7lFszYk","executionInfo":{"status":"ok","timestamp":1634060775419,"user_tz":-330,"elapsed":14,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"a47d77bb-bbfc-4e81-f272-4cdef9846087"},"source":["#Pearson correlation coefficient\n","from scipy import stats\n","pearson_coef, p_value = stats.pearsonr(y_test_un, y_pred_un)\n","print(\"Correlation coefficient = \"+ str(pearson_coef))\n","\n","from sklearn.metrics import r2_score\n","print(f\"r2 Score of test set : {r2_score(y_test_un, y_pred_un)}\")\n"],"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["Correlation coefficient = 0.7570762800876621\n","r2 Score of test set : 0.30008524728561325\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"74qeFhsIrEtF","executionInfo":{"status":"ok","timestamp":1634060776208,"user_tz":-330,"elapsed":798,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"847a3c97-b355-4fef-9b6e-8f649f39d2c7"},"source":["###Implementing Mini-batch Gradient Descent using Least Angle Regression\n","\n","#MBGD\n","def leastangle_regression_mbgd(w, X, y, alpha=0.01, lambda_val=1, epochs=1000):\n"," \n","    # stores the updates on the cost function (loss function)\n","    cost_hist_list = []\n","    \n","    batch_size = 20\n","    # iterate until the maximum number of epochs\n","    for current_iteration in np.arange(epochs):  # begin the process\n","        rand_index = np.random.randint(len(y))\n","        ind_x = X[rand_index:rand_index+batch_size]\n","        ind_y = y[rand_index:rand_index+batch_size]\n","        m =ind_y.shape[0]\n","\n","        # compute the dot product between our feature 'X' and weight 'W'\n","        hypothesis = np.dot(ind_x,w.T)\n","\n","        # calculate the difference between the actual and predicted value\n","        error = hypothesis - ind_y\n","        \n","        # regularization term\n","        la_reg_term = (lambda_val / (2 * m)) * np.sum(np.abs(w))\n"," \n","        # calculate the cost (MSE) + regularization term\n","        J = (1 / (2 * m)) * np.sum(error ** 2) + la_reg_term\n"," \n","        # Update our gradient by the dot product between\n","        # the transpose of 'X' and our error + lambda value * W\n","        # divided by the total number of samples\n","        gradient = (1 / m) * (ind_x.T.dot(error) + (lambda_val/2 * np.sign(w)))\n"," \n","        # Now we have to update our weights\n","        w = w - alpha * gradient\n"," \n","        # keep track the cost as it changes in each iteration\n","        cost_hist_list.append(J)\n"," \n","    return w, cost_hist_list\n","\n","\n","w_mbgd_L1, cost_hist_list = leastangle_regression_mbgd(w, x_train, y_train)\n","cost_hist_list[999]\n","\n","plt.plot(range(1000),cost_hist_list)\n","plt.show()\n"],"execution_count":50,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"PCq2k_6TtHWW","executionInfo":{"status":"ok","timestamp":1634060776209,"user_tz":-330,"elapsed":21,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}}},"source":["#Implementing Grid Search for Hyperparameter Tuning\n","\n","x_valid[:5]\n","\n","def grid_search_L1mbgd(w,X,y):\n","    alpha = [0.01, 0.05,0.1,0.15, 0.5]\n","    lambda_val = [0.05, 0.1, 0.5, 1, 2]\n","    min_w = [0, 0, 0, 0, 0]\n","    min_MSE = 2\n","    for alpha in alpha:\n","        for j in lambda_val:\n","            w_temp,J_temp = leastangle_regression_mbgd(w, X, y, alpha, j)\n","            m =y.shape[0]\n","\n","            hypothesis = np.dot(X,w_temp.T)\n","            error = hypothesis - y\n","            \n","            MSE = (1 / (2 * m)) * np.sum(error ** 2)\n","            if min_MSE > MSE :\n","                min_MSE = MSE\n","                min_w = w_temp\n","            print(\"MSE for alpha : \"+str(alpha)+\" and lambda : \"+str(j)+\" is = \"+str(MSE))\n","            #print(\"J for alpha : \"+str(alpha)+\" is = \"+str(J_temp[999]))\n","    return min_w, min_MSE  "],"execution_count":51,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MmNhTLS8tHLL","executionInfo":{"status":"ok","timestamp":1634060777623,"user_tz":-330,"elapsed":1432,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"9638a00c-84c2-44eb-c44c-a00b21daa0a2"},"source":["opti_w,opti_MSE = grid_search_L1mbgd(w_mbgd_L1,x_valid,y_valid)\n","\n","y_pred = np.dot(x_test,opti_w.T)\n","y_pred_un = y_pred * (y_max - y_min) + y_min\n","y_test_un = y_test * (y_max - y_min) + y_min\n","error = y_pred_un - y_test_un\n","MSE = (1 / (2 * y_test.shape[0])) * np.sum(error ** 2)\n","MAE = (1 / (2 * y_test.shape[0])) * np.sum(abs(error))\n","print(\"MSE = \"+str(MSE))\n","print(\"MAE = \"+str(MAE))"],"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["MSE for alpha : 0.01 and lambda : 0.05 is = 0.028313412784147122\n","MSE for alpha : 0.01 and lambda : 0.1 is = 0.029714517332800897\n","MSE for alpha : 0.01 and lambda : 0.5 is = 0.0334687326485942\n","MSE for alpha : 0.01 and lambda : 1 is = 0.04665664954831929\n","MSE for alpha : 0.01 and lambda : 2 is = 0.07967629894817531\n","MSE for alpha : 0.05 and lambda : 0.05 is = 0.023137283509974006\n","MSE for alpha : 0.05 and lambda : 0.1 is = 0.02537138460846221\n","MSE for alpha : 0.05 and lambda : 0.5 is = 0.03161321616728616\n","MSE for alpha : 0.05 and lambda : 1 is = 0.0428220032746024\n","MSE for alpha : 0.05 and lambda : 2 is = 0.08048793516304166\n","MSE for alpha : 0.1 and lambda : 0.05 is = 0.021900752021574883\n","MSE for alpha : 0.1 and lambda : 0.1 is = 0.023119871147334874\n","MSE for alpha : 0.1 and lambda : 0.5 is = 0.031188966055123047\n","MSE for alpha : 0.1 and lambda : 1 is = 0.04728181946134501\n","MSE for alpha : 0.1 and lambda : 2 is = 0.0575227315864834\n","MSE for alpha : 0.15 and lambda : 0.05 is = 0.02178438768595195\n","MSE for alpha : 0.15 and lambda : 0.1 is = 0.021950185331116\n","MSE for alpha : 0.15 and lambda : 0.5 is = 0.03115302939833227\n","MSE for alpha : 0.15 and lambda : 1 is = 0.06941539658504671\n","MSE for alpha : 0.15 and lambda : 2 is = 0.17441215422668147\n","MSE for alpha : 0.5 and lambda : 0.05 is = 0.02082140297254881\n","MSE for alpha : 0.5 and lambda : 0.1 is = 0.024730738943698167\n","MSE for alpha : 0.5 and lambda : 0.5 is = 0.03286559128143216\n","MSE for alpha : 0.5 and lambda : 1 is = 0.03692615427382517\n","MSE for alpha : 0.5 and lambda : 2 is = 0.04040420279831548\n","MSE = 0.06089322781391637\n","MAE = 0.14609735247104483\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-HApMuo4tHEA","executionInfo":{"status":"ok","timestamp":1634060777625,"user_tz":-330,"elapsed":32,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"57b78bbb-fe59-479e-baf3-dec59169c4fa"},"source":["from scipy import stats\n","pearson_coef, p_value = stats.pearsonr(y_test_un, y_pred_un)\n","print(\"Correlation coefficient = \"+ str(pearson_coef))\n","\n","from sklearn.metrics import r2_score\n","print(f\"r2 Score of test set : {r2_score(y_test_un, y_pred_un)}\")"],"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["Correlation coefficient = 0.8253905214500666\n","r2 Score of test set : 0.6767758627978951\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"X5kZ4ZcDrEqc","executionInfo":{"status":"ok","timestamp":1634060777627,"user_tz":-330,"elapsed":24,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"57828a98-5827-4aec-c680-02c07ca860ad"},"source":["###Implementing Stocastic Gradient with Least Angle Regression\n","\n","#SGD\n","def leastangle_regression_sgd(w, X, y, alpha=0.01, lambda_val=1, epochs=1000):\n"," \n","    # stores the updates on the cost function (loss function)\n","    cost_hist_list = []\n","    \n","    # iterate until the maximum number of epochs\n","    for current_iteration in np.arange(epochs):  # begin the process\n","\n","        rand_index = np.random.randint(len(y))\n","        ind_x = X[rand_index:rand_index+1]\n","        ind_y = y[rand_index:rand_index+1]\n","        m = ind_y.shape[0]\n","        # compute the dot product between our feature 'X' and weight 'W'\n","        hypothesis = np.dot(ind_x,w.T)\n","\n","        # calculate the difference between the actual and predicted value\n","        error = hypothesis - ind_y\n","        \n","        # regularization term\n","        la_reg_term = (lambda_val / (2 * m)) * np.sum(np.abs(w))\n"," \n","        # calculate the cost (MSE) + regularization term\n","        J = (1 / (2 * m)) * np.sum(error ** 2) + la_reg_term\n"," \n","        # Update our gradient by the dot product between\n","        # the transpose of 'X' and our error + lambda value * W\n","        # divided by the total number of samples\n","        gradient = (1 / m) * (ind_x.T.dot(error) + (lambda_val/2 * np.sign(w)))\n"," \n","        # Now we have to update our weights\n","        w = w - alpha * gradient\n"," \n","        # keep track the cost as it changes in each iteration\n","        cost_hist_list.append(J)\n"," \n","    return w, cost_hist_list\n","\n","w_sgd_L1, cost_hist_list = leastangle_regression_sgd(w, x_train, y_train)\n","cost_hist_list[999]\n","\n","plt.plot(range(1000),cost_hist_list)\n","plt.show()   \n"],"execution_count":54,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"wycSSVaTrEoS","executionInfo":{"status":"ok","timestamp":1634060777628,"user_tz":-330,"elapsed":19,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}}},"source":["#Implementing Grid Search for Hyperparameter Tuning\n","\n","x_valid[:5]\n","\n","def grid_search_L1sgd(w,X,y):\n","    alpha = [0.01, 0.05,0.1,0.15, 0.5]\n","    lambda_val = [0.05, 0.1, 0.5, 1, 2]\n","    min_w = [0, 0, 0, 0, 0]\n","    min_MSE = 2\n","    for alpha in alpha:\n","        for j in lambda_val:\n","            w_temp,J_temp = leastangle_regression_sgd(w, X, y, alpha, j)\n","            m =y.shape[0]\n","\n","            hypothesis = np.dot(X,w_temp.T)\n","            error = hypothesis - y\n","            \n","            MSE = (1 / (2 * m)) * np.sum(error ** 2)\n","            if min_MSE > MSE :\n","                min_MSE = MSE\n","                min_w = w_temp\n","            print(\"MSE for alpha : \"+str(alpha)+\" and lambda : \"+str(j)+\" is = \"+str(MSE))\n","            #print(\"J for alpha : \"+str(alpha)+\" is = \"+str(J_temp[999]))\n","    return min_w, min_MSE "],"execution_count":55,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"itegP0xurElQ","executionInfo":{"status":"ok","timestamp":1634060778185,"user_tz":-330,"elapsed":574,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"6b2a1bd3-9a3c-4503-9f80-eb48ad46ca55"},"source":["opti_w,opti_MSE = grid_search_L1sgd(w_sgd_L1,x_valid,y_valid)\n","\n","y_pred = np.dot(x_test,opti_w.T)\n","y_pred_un = y_pred * (y_max - y_min) + y_min\n","y_test_un = y_test * (y_max - y_min) + y_min\n","error = y_pred_un - y_test_un\n","MSE = (1 / (2 * y_test.shape[0])) * np.sum(error ** 2)\n","MAE = (1 / (2 * y_test.shape[0])) * np.sum(abs(error))\n","print(\"MSE = \"+str(MSE))\n","print(\"MAE = \"+str(MAE))"],"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["MSE for alpha : 0.01 and lambda : 0.05 is = 0.03080465686519688\n","MSE for alpha : 0.01 and lambda : 0.1 is = 0.03780778977732585\n","MSE for alpha : 0.01 and lambda : 0.5 is = 0.08682981316443969\n","MSE for alpha : 0.01 and lambda : 1 is = 0.17954740250195436\n","MSE for alpha : 0.01 and lambda : 2 is = 0.31685930545625\n","MSE for alpha : 0.05 and lambda : 0.05 is = 0.02476759566845699\n","MSE for alpha : 0.05 and lambda : 0.1 is = 0.030505320194900425\n","MSE for alpha : 0.05 and lambda : 0.5 is = 0.07603503661748251\n","MSE for alpha : 0.05 and lambda : 1 is = 0.17955067205972278\n","MSE for alpha : 0.05 and lambda : 2 is = 0.29242262323277185\n","MSE for alpha : 0.1 and lambda : 0.05 is = 0.021730206729050423\n","MSE for alpha : 0.1 and lambda : 0.1 is = 0.02823953859895246\n","MSE for alpha : 0.1 and lambda : 0.5 is = 0.170772448962668\n","MSE for alpha : 0.1 and lambda : 1 is = 0.18330840968583365\n","MSE for alpha : 0.1 and lambda : 2 is = 0.10553033117216395\n","MSE for alpha : 0.15 and lambda : 0.05 is = 0.020497270698646146\n","MSE for alpha : 0.15 and lambda : 0.1 is = 0.025517350729603303\n","MSE for alpha : 0.15 and lambda : 0.5 is = 0.06889305903992532\n","MSE for alpha : 0.15 and lambda : 1 is = 0.11073579736084939\n","MSE for alpha : 0.15 and lambda : 2 is = 0.07330593863866151\n","MSE for alpha : 0.5 and lambda : 0.05 is = 0.03763447212236949\n","MSE for alpha : 0.5 and lambda : 0.1 is = 0.03535970731339135\n","MSE for alpha : 0.5 and lambda : 0.5 is = 0.08990209420756781\n","MSE for alpha : 0.5 and lambda : 1 is = 0.16044799421345618\n","MSE for alpha : 0.5 and lambda : 2 is = 0.19222911707816231\n","MSE = 0.05861206724383632\n","MAE = 0.13992626744255895\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bHg8YoQ7rEil","executionInfo":{"status":"ok","timestamp":1634060778188,"user_tz":-330,"elapsed":19,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"01428d70-e9af-49f5-cdbd-bad9de0ec8cc"},"source":["from scipy import stats\n","pearson_coef, p_value = stats.pearsonr(y_test_un, y_pred_un)\n","print(\"Correlation coefficient = \"+ str(pearson_coef))\n","\n","from sklearn.metrics import r2_score\n","print(f\"r2 Score of test set : {r2_score(y_test_un, y_pred_un)}\")"],"execution_count":57,"outputs":[{"output_type":"stream","name":"stdout","text":["Correlation coefficient = 0.8352574716741419\n","r2 Score of test set : 0.6888843711419885\n"]}]}]}