{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"assignment-1_Q2","provenance":[],"authorship_tag":"ABX9TyPJmaDISgcUaj9V9hNvMZGa"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"lUnXEOKrn-iH","executionInfo":{"status":"ok","timestamp":1634047560847,"user_tz":-330,"elapsed":630,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}}},"source":["import pandas as pd\n","import math\n","import numpy as np\n","import matplotlib.pyplot as plt\n","plt.style.use('seaborn-white')\n","from sklearn.model_selection import train_test_split #data splitting\n"],"execution_count":27,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FfVK-MMSlw56","executionInfo":{"status":"ok","timestamp":1634047898333,"user_tz":-330,"elapsed":582,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"0702078f-b5fe-4928-81ff-55f2404bdf5d"},"source":["df = pd.read_excel (r'/content/data_q2_q3.xlsx')\n","print(df)"],"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["     Feat1  Feat2  Feat3  Feat4  Output\n","0    0.195  0.025    1.5   4.97     2.2\n","1    0.195  0.025    2.0   4.97     2.2\n","2    0.195  0.025    3.0   4.97     2.2\n","3    0.195  0.025    4.0   4.97     2.2\n","4    0.195  0.125    1.5   4.97     2.2\n","..     ...    ...    ...    ...     ...\n","110  0.180  0.125    1.5   4.40     2.2\n","111  0.180  0.125    2.0   4.40     2.2\n","112  0.180  0.125    3.0   4.40     2.2\n","113  0.180  0.125    4.0   4.40     2.2\n","114  0.180  0.125    5.0   4.40     2.2\n","\n","[115 rows x 5 columns]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NZLZ2PQvoreo","executionInfo":{"status":"ok","timestamp":1634047911450,"user_tz":-330,"elapsed":615,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"1df71665-8a2d-492e-bdb7-3258da386d67"},"source":["data = df.values\n","X=data[:,[0,1,2,3]]\n","y=data[:,4]\n","y[:10]"],"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 2.3])"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XH9pnkx8oxlv","executionInfo":{"status":"ok","timestamp":1634047944218,"user_tz":-330,"elapsed":622,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"40d52386-7f95-4c5a-eec9-d2fdb418ed35"},"source":["#Train, Validate, Test ratio = 70:10:20\n","\n","x_train, x_left, y_train, y_left = train_test_split(X,y, train_size=0.7, random_state=0)\n","x_test, x_valid, y_test, y_valid = train_test_split(x_left, y_left, train_size=0.6666, random_state=0)\n","\n","x_valid[:5]\n"],"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.26 , 0.125, 1.5  , 4.4  ],\n","       [0.155, 0.125, 5.   , 4.97 ],\n","       [0.245, 0.125, 4.   , 5.74 ],\n","       [0.195, 0.125, 5.   , 4.97 ],\n","       [0.185, 0.025, 1.5  , 5.74 ]])"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZYO7WSauo9sc","executionInfo":{"status":"ok","timestamp":1634047960500,"user_tz":-330,"elapsed":765,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"7eb45b9e-03b7-4b98-e256-afed82725bd8"},"source":["#Normalisation\n","\n","x_min = np.min(x_train, axis = 0)\n","x_max = np.max(x_train, axis = 0)\n","x_train = (x_train- x_min)/(x_max-x_min)\n","x_test = (x_test- x_min)/(x_max-x_min)\n","\n","x_valid = (x_valid- x_min)/(x_max-x_min)\n","x_valid[:5]\n","\n","y_min = np.min(y_train, axis = 0)\n","y_max = np.max(y_train, axis = 0)\n","y_train = (y_train- y_min)/(y_max-y_min)\n","y_test = (y_test- y_min)/(y_max-y_min)\n","y_valid = (y_valid- y_min)/(y_max-y_min)\n","y_train[:10]\n"],"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.66666667, 0.93333333, 0.93333333, 1.        , 0.93333333,\n","       0.93333333, 0.93333333, 1.        , 0.93333333, 1.        ])"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","metadata":{"id":"z3Cl1V-ZpCyr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1634047968087,"user_tz":-330,"elapsed":734,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"f7d1060c-311a-4ccb-f99b-87d86eb9c75f"},"source":["x_train = np.append(np.ones([y_train.shape[0], 1]),x_train, axis=1)\n","w = np.random.rand(x_train.shape[1])\n","print(w) \n","\n","x_train[:5]\n","\n","x_valid = np.append(np.ones([y_valid.shape[0], 1]),x_valid, axis=1)\n","x_test = np.append(np.ones([y_test.shape[0], 1]),x_test, axis=1)"],"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.2394902  0.90499223 0.18713067 0.46259577 0.18906713]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":262},"id":"QOduAm3CpJPY","executionInfo":{"status":"ok","timestamp":1634048079494,"user_tz":-330,"elapsed":1482,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"5dc71f93-eaed-4c55-f688-f87911aa6406"},"source":["#Batch grad Descent with Ridge Regression\n","\n","def ridge_reg_bgd(w, X, y, alp=0.01, lambda_val=1, epochs=1000):\n"," \n","    cost_h_list = []\n","    m =y.shape[0]\n","    for current_iteration in np.arange(epochs):  # begin the process\n","        hypothesis = np.dot(X,w.T) ## compute the dot product between our feature 'X' and weight 'W'\n","        err = hypothesis - y\n","        ridge_reg_term = (lambda_val / (2 * m)) * np.sum(np.square(w))   ## regularization term\n","        J = (1 / (2 * m)) * np.sum(err ** 2) + ridge_reg_term\n","\n","        grad = (1 / m) * (X.T.dot(err) + (lambda_val * w))\n","        w = w - alp * grad\n","        cost_h_list.append(J)\n"," \n","    return w, cost_h_list\n","\n","w_bgd_L2, cost_h_list = ridge_reg_bgd(w, x_train, y_train)\n","cost_h_list[999]\n","\n","plt.plot(range(1000),cost_h_list,\"green\")\n","plt.show()\n"],"execution_count":48,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-tyuBpfWpTqX","executionInfo":{"status":"ok","timestamp":1634048117588,"user_tz":-330,"elapsed":1490,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"7c4c35ae-37d9-43b9-d426-75cfe5fa4ae0"},"source":["#grid search\n","def grid_search_l2bgd(w,X,y):\n","    alp = [0.01, 0.05,0.1,0.15, 0.5]\n","    lambda_val = [0.05, 0.1, 0.5, 1, 2]\n","    min_w = [0, 0, 0, 0, 0]\n","    min_MSE = 2\n","    for alp in alp:\n","        for j in lambda_val:\n","            w_temp,J_temp = ridge_reg_bgd(w, X, y, alp, j)\n","            m =y.shape[0]\n","\n","            hypothesis = np.dot(X,w_temp.T)\n","            err = hypothesis - y\n","            \n","            MSE = (1 / (2 * m)) * np.sum(err ** 2)\n","            if min_MSE > MSE :\n","                min_MSE = MSE\n","                min_w = w_temp\n","\n","            print(\"MSE for alp : \"+str(alp)+\" and lambda : \"+str(j)+\" is = \"+str(MSE))\n","    return min_w, min_MSE \n","\n","opti_w,opti_MSE = grid_search_l2bgd(w_bgd_L2,x_valid,y_valid)\n","\n","print()\n","print(\"weights:\")\n","print(opti_w)\n","print()\n","\n","y_pred = np.dot(x_test,opti_w.T)\n","\n","\n","#Unnormalize \n","y_pred_un = y_pred * (y_max - y_min) + y_min\n","y_test_un = y_test * (y_max - y_min) + y_min\n","err = y_pred_un - y_test_un\n","MSE = (1 / (2 * y_test.shape[0])) * np.sum(err ** 2)\n","MAE = (1 / (2 * y_test.shape[0])) * np.sum(abs(err))\n","print(\"MSE = \"+ str(MSE))\n","print(\"MAE = \"+ str(MAE))\n"],"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["MSE for alp : 0.01 and lambda : 0.05 is = 0.016970357649451324\n","MSE for alp : 0.01 and lambda : 0.1 is = 0.016942434626317615\n","MSE for alp : 0.01 and lambda : 0.5 is = 0.017221420647857803\n","MSE for alp : 0.01 and lambda : 1 is = 0.018287982892362418\n","MSE for alp : 0.01 and lambda : 2 is = 0.02116523478600198\n","MSE for alp : 0.05 and lambda : 0.05 is = 0.016411635775061682\n","MSE for alp : 0.05 and lambda : 0.1 is = 0.0164395141557271\n","MSE for alp : 0.05 and lambda : 0.5 is = 0.017474824556238864\n","MSE for alp : 0.05 and lambda : 1 is = 0.018941575281111817\n","MSE for alp : 0.05 and lambda : 2 is = 0.021719579751265837\n","MSE for alp : 0.1 and lambda : 0.05 is = 0.01640743696266559\n","MSE for alp : 0.1 and lambda : 0.1 is = 0.016483150302068282\n","MSE for alp : 0.1 and lambda : 0.5 is = 0.017543281522917627\n","MSE for alp : 0.1 and lambda : 1 is = 0.018953846238055325\n","MSE for alp : 0.1 and lambda : 2 is = 0.021719803015413562\n","MSE for alp : 0.15 and lambda : 0.05 is = 0.016418664183690732\n","MSE for alp : 0.15 and lambda : 0.1 is = 0.016501775745984167\n","MSE for alp : 0.15 and lambda : 0.5 is = 0.017546197099166605\n","MSE for alp : 0.15 and lambda : 1 is = 0.018953906380529885\n","MSE for alp : 0.15 and lambda : 2 is = 0.021719803030609705\n","MSE for alp : 0.5 and lambda : 0.05 is = 0.016423870150948247\n","MSE for alp : 0.5 and lambda : 0.1 is = 0.016507363842263832\n","MSE for alp : 0.5 and lambda : 0.5 is = 0.017546317451641986\n","MSE for alp : 0.5 and lambda : 1 is = 0.01895390666503549\n","MSE for alp : 0.5 and lambda : 2 is = 0.021719803030610642\n","\n","weights:\n","[0.34900167 0.62573307 0.07221466 0.03275707 0.11475936]\n","\n","MSE = 0.08318154641080684\n","MAE = 0.16527496168742845\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dOtw_q-NplqX","executionInfo":{"status":"ok","timestamp":1634048149082,"user_tz":-330,"elapsed":578,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"6b989b12-c515-4203-f0b8-14d787f54c53"},"source":["#Pearson correlation coefficient\n","from scipy import stats\n","pearson_coe, p_value = stats.pearsonr(y_test_un, y_pred_un)\n","print(\"Correlation coefficient = \"+ str(pearson_coe))\n","\n","from sklearn.metrics import r2_score\n","print(f\"r2 Score of test set : {r2_score(y_test_un, y_pred_un)}\")"],"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["Correlation coefficient = 0.8920142384116787\n","r2 Score of test set : 0.5320816880974392\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":262},"id":"3Cp23kd2ps4M","executionInfo":{"status":"ok","timestamp":1634048364412,"user_tz":-330,"elapsed":1869,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"5a4da05a-d519-49f2-e8af-c57b9c9fabde"},"source":["#Mini-batch grad Descent using Ridge Regression\n","\n","def ridge_reg_mbgd(w, X, y, alp=0.01, lambda_val=1, epochs=1000):\n"," \n","    # stores the updates on the cost function (loss function)\n","    cost_h_list = []\n","    \n","    b_size = 20\n","    # iterate until the maximum number of epochs\n","    for current_iteration in np.arange(epochs):  # begin the process\n","        rand_index = np.random.randint(len(y))\n","        ind_x = X[rand_index:rand_index+b_size]\n","        ind_y = y[rand_index:rand_index+b_size]\n","        m =ind_y.shape[0]\n","        hypothesis = np.dot(ind_x,w.T)\n","        err = hypothesis - ind_y\n","        ridge_reg_term = (lambda_val / (2 * m)) * np.sum(np.square(w))\n","        J = (1 / (2 * m)) * np.sum(err ** 2) + ridge_reg_term\n","        grad = (1 / m) * (ind_x.T.dot(err) + (lambda_val * w))\n","        w = w - alp * grad\n","        cost_h_list.append(J)\n"," \n","    return w, cost_h_list\n","\n","\n","w_mbgd_L2, cost_h_list = ridge_reg_mbgd(w, x_train, y_train)\n","cost_h_list[999]\n","\n","plt.plot(range(1000),cost_h_list,\"green\")\n","plt.show()\n"],"execution_count":60,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"I6izoRQUp1AS","executionInfo":{"status":"ok","timestamp":1634048342863,"user_tz":-330,"elapsed":575,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}}},"source":["x_valid[:5]\n","\n","def grid_search_l2mbgd(w,X,y):\n","    alp = [0.01, 0.05,0.1,0.15, 0.5]\n","    lambda_val = [0.05, 0.1, 0.5, 1, 2]\n","    min_w = [0, 0, 0, 0, 0]\n","    min_MSE = 2\n","    for alp in alp:\n","        for j in lambda_val:\n","            w_temp,J_temp = ridge_reg_mbgd(w, X, y, alp, j)\n","            m =y.shape[0]\n","\n","            hypothesis = np.dot(X,w_temp.T)\n","            err = hypothesis - y\n","            \n","            MSE = (1 / (2 * m)) * np.sum(err ** 2)\n","            if min_MSE > MSE :\n","                min_MSE = MSE\n","                min_w = w_temp\n","            print(\"MSE for alp : \"+str(alp)+\" and lambda : \"+str(j)+\" is = \"+str(MSE))\n","    return min_w, min_MSE    \n"],"execution_count":58,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iolQelyIp8tc","executionInfo":{"status":"ok","timestamp":1634048351170,"user_tz":-330,"elapsed":1532,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"81859254-9291-40e2-91ca-dd1e576fc6e0"},"source":["opti_w,opti_MSE = grid_search_l2mbgd(w_mbgd_L2,x_valid,y_valid)\n","\n","print()\n","print(\"weights:\")\n","print(opti_w)\n","print()\n","\n","y_pred = np.dot(x_test,opti_w.T)\n","y_pred_un = y_pred * (y_max - y_min) + y_min\n","y_test_un = y_test * (y_max - y_min) + y_min\n","err = y_pred_un - y_test_un\n","MSE = (1 / (2 * y_test.shape[0])) * np.sum(err ** 2)\n","MAE = (1 / (2 * y_test.shape[0])) * np.sum(abs(err))\n","print(\"MSE = \"+str(MSE))\n","print(\"MAE = \"+str(MAE))\n"],"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["MSE for alp : 0.01 and lambda : 0.05 is = 0.018875241613276528\n","MSE for alp : 0.01 and lambda : 0.1 is = 0.018514065152897195\n","MSE for alp : 0.01 and lambda : 0.5 is = 0.021550506129087866\n","MSE for alp : 0.01 and lambda : 1 is = 0.026097262610742293\n","MSE for alp : 0.01 and lambda : 2 is = 0.04206936603972217\n","MSE for alp : 0.05 and lambda : 0.05 is = 0.019297224238632726\n","MSE for alp : 0.05 and lambda : 0.1 is = 0.019195183541985565\n","MSE for alp : 0.05 and lambda : 0.5 is = 0.023145725574899932\n","MSE for alp : 0.05 and lambda : 1 is = 0.024886636001700657\n","MSE for alp : 0.05 and lambda : 2 is = 0.03319725567456576\n","MSE for alp : 0.1 and lambda : 0.05 is = 0.020191631379767663\n","MSE for alp : 0.1 and lambda : 0.1 is = 0.019856969772682108\n","MSE for alp : 0.1 and lambda : 0.5 is = 0.022774473217906717\n","MSE for alp : 0.1 and lambda : 1 is = 0.02262701024153594\n","MSE for alp : 0.1 and lambda : 2 is = 0.0455074957916094\n","MSE for alp : 0.15 and lambda : 0.05 is = 0.019726064975660096\n","MSE for alp : 0.15 and lambda : 0.1 is = 0.01875806397280519\n","MSE for alp : 0.15 and lambda : 0.5 is = 0.02461230049198819\n","MSE for alp : 0.15 and lambda : 1 is = 0.047165833272783245\n","MSE for alp : 0.15 and lambda : 2 is = 0.033575392602115714\n","MSE for alp : 0.5 and lambda : 0.05 is = 0.02272340816660299\n","MSE for alp : 0.5 and lambda : 0.1 is = 0.018256030360136444\n","MSE for alp : 0.5 and lambda : 0.5 is = 0.0204739831967735\n","MSE for alp : 0.5 and lambda : 1 is = 0.11651021207433238\n","MSE for alp : 0.5 and lambda : 2 is = 0.03230179794040149\n","\n","weights:\n","[ 0.26488871  0.66497969  0.19380388 -0.01094408  0.14632341]\n","\n","MSE = 0.08174948361712737\n","MAE = 0.1611429260060947\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WmBTXFtmqCS9","executionInfo":{"status":"ok","timestamp":1634048373784,"user_tz":-330,"elapsed":617,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"458cdd0b-783c-4c7f-b803-eb2947b43305"},"source":["from scipy import stats\n","pearson_coef, p_value = stats.pearsonr(y_test_un, y_pred_un)\n","print(\"Correlation coefficient = \"+ str(pearson_coef))\n","\n","from sklearn.metrics import r2_score\n","print(f\"r2 Score of test set : {r2_score(y_test_un, y_pred_un)}\")\n"],"execution_count":61,"outputs":[{"output_type":"stream","name":"stdout","text":["Correlation coefficient = 0.8451436313551002\n","r2 Score of test set : 0.540137422017648\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":262},"id":"rLQ0zdCpqH4s","executionInfo":{"status":"ok","timestamp":1634048407424,"user_tz":-330,"elapsed":1521,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"42ade2bd-d7f9-4386-dc96-4f6961ee1621"},"source":["#Stocastic grad using Ridge Regression\n","def ridge_reg_sgd(w, X, y, alp=0.01, lambda_val=1, epochs=1000):\n","\n","    cost_h_list = []\n","    for current_iteration in np.arange(epochs):  # begin the process\n","\n","        rand_index = np.random.randint(len(y))\n","        ind_x = X[rand_index:rand_index+1]\n","        ind_y = y[rand_index:rand_index+1]\n","        m = ind_y.shape[0]\n","        hypothesis = np.dot(ind_x,w.T)\n","        err = hypothesis - ind_y\n","        ridge_reg_term = (lambda_val / (2 * m)) * np.sum(np.square(w))\n","        J = (1 / (2 * m)) * np.sum(err ** 2) + ridge_reg_term\n","        grad = (1) * (ind_x.T.dot(err) + (lambda_val * w))\n","        w = w - alp * grad\n","\n","        cost_h_list.append(J)\n"," \n","    return w, cost_h_list\n","\n","w_sgd_L2, cost_h_list = ridge_reg_sgd(w, x_train, y_train)\n","cost_h_list[999]\n","\n","plt.plot(range(1000),cost_h_list,\"green\")\n","plt.show()"],"execution_count":63,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"low1j19UqPFr","executionInfo":{"status":"ok","timestamp":1634048423353,"user_tz":-330,"elapsed":1667,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"86c40e9b-9e13-4559-f2f5-afde081d6e2c"},"source":["x_valid[:5]\n","\n","def grid_search_l2sgd(w,X,y):\n","    alp = [0.01, 0.05,0.1,0.15, 0.5]\n","    lambda_val = [0.05, 0.1, 0.5, 1, 2]\n","    min_w = [0, 0, 0, 0, 0]\n","    min_MSE = 2\n","    for alp in alp:\n","        for j in lambda_val:\n","            w_temp,J_temp = ridge_reg_sgd(w, X, y, alp, j)\n","            m =y.shape[0]\n","\n","            hypothesis = np.dot(X,w_temp.T)\n","            err = hypothesis - y\n","            \n","            MSE = (1 / (2 * m)) * np.sum(err ** 2)\n","            if min_MSE > MSE :\n","                min_MSE = MSE\n","                min_w = w_temp\n","            print(\"MSE for alp : \"+str(alp)+\" and lambda : \"+str(j)+\" is = \"+str(MSE))\n","            #print(\"J for alp : \"+str(alp)+\" is = \"+str(J_temp[999]))\n","    return min_w, min_MSE    \n","\n","opti_w,opti_MSE = grid_search_l2sgd(w_sgd_L2,x_valid,y_valid)\n","\n","print()\n","print(\"weights:\")\n","print(opti_w)\n","print()\n","\n","y_pred = np.dot(x_test,opti_w.T)\n","y_pred_un = y_pred * (y_max - y_min) + y_min\n","y_test_un = y_test * (y_max - y_min) + y_min\n","err = y_pred_un - y_test_un\n","MSE = (1 / (2 * y_test.shape[0])) * np.sum(err ** 2)\n","MAE = (1 / (2 * y_test.shape[0])) * np.sum(abs(err))\n","print(\"MSE = \"+str(MSE))\n","print(\"MAE = \"+str(MAE))\n"],"execution_count":64,"outputs":[{"output_type":"stream","name":"stdout","text":["MSE for alp : 0.01 and lambda : 0.05 is = 0.019236259632685968\n","MSE for alp : 0.01 and lambda : 0.1 is = 0.019352226342660272\n","MSE for alp : 0.01 and lambda : 0.5 is = 0.03446767643105928\n","MSE for alp : 0.01 and lambda : 1 is = 0.05323247413024491\n","MSE for alp : 0.01 and lambda : 2 is = 0.10294135995867587\n","MSE for alp : 0.05 and lambda : 0.05 is = 0.019546911724845403\n","MSE for alp : 0.05 and lambda : 0.1 is = 0.01958149276910786\n","MSE for alp : 0.05 and lambda : 0.5 is = 0.03312492267773316\n","MSE for alp : 0.05 and lambda : 1 is = 0.06346764735098327\n","MSE for alp : 0.05 and lambda : 2 is = 0.09214386685862233\n","MSE for alp : 0.1 and lambda : 0.05 is = 0.0293187214003242\n","MSE for alp : 0.1 and lambda : 0.1 is = 0.027566127286462398\n","MSE for alp : 0.1 and lambda : 0.5 is = 0.037132383867724744\n","MSE for alp : 0.1 and lambda : 1 is = 0.04699871777846885\n","MSE for alp : 0.1 and lambda : 2 is = 0.0918196996591036\n","MSE for alp : 0.15 and lambda : 0.05 is = 0.020256941978553898\n","MSE for alp : 0.15 and lambda : 0.1 is = 0.020465448707728387\n","MSE for alp : 0.15 and lambda : 0.5 is = 0.03019871343730582\n","MSE for alp : 0.15 and lambda : 1 is = 0.05408467774791742\n","MSE for alp : 0.15 and lambda : 2 is = 0.08682107170337633\n","MSE for alp : 0.5 and lambda : 0.05 is = 0.024262049330777594\n","MSE for alp : 0.5 and lambda : 0.1 is = 0.10087174298554837\n","MSE for alp : 0.5 and lambda : 0.5 is = 0.028351285358331334\n","MSE for alp : 0.5 and lambda : 1 is = 0.037108297842827216\n","MSE for alp : 0.5 and lambda : 2 is = 2.7011887861361072e+101\n","\n","weights:\n","[0.38168857 0.38049278 0.14588818 0.06536635 0.17473117]\n","\n","MSE = 0.1108231461732795\n","MAE = 0.17848655871614866\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"owl5OwA2qWYO","executionInfo":{"status":"ok","timestamp":1634048429694,"user_tz":-330,"elapsed":1303,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"71e64203-3f24-460a-87d4-0f82aed96f61"},"source":["from scipy import stats\n","pearson_coef, p_value = stats.pearsonr(y_test_un, y_pred_un)\n","print(\"Correlation coefficient = \"+ str(pearson_coef))\n","\n","from sklearn.metrics import r2_score\n","print(f\"r2 Score of test set : {r2_score(y_test_un, y_pred_un)}\")\n"],"execution_count":65,"outputs":[{"output_type":"stream","name":"stdout","text":["Correlation coefficient = 0.7840850169745214\n","r2 Score of test set : 0.3765903410711947\n"]}]}]}