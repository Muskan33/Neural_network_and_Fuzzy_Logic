{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Assignment-1(5)","provenance":[],"authorship_tag":"ABX9TyM6TEgdXjXXNsvLP9GWhoJU"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"ZLYxQIEAGWvt","executionInfo":{"status":"ok","timestamp":1634061992696,"user_tz":-330,"elapsed":2242,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}}},"source":["import pandas as pd\n","import math\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from scipy import stats\n","from sklearn.model_selection import KFold\n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"SBiTST08tIZW","executionInfo":{"status":"ok","timestamp":1634061992698,"user_tz":-330,"elapsed":44,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}}},"source":["#Logistic Function Definition\n","def sigmoid(z):\n","  z = z.astype(float)\n","  s = 1/(1 + np.exp(-z))\n","  return s\n"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"0Nf8JFYKtMHw","executionInfo":{"status":"ok","timestamp":1634061992699,"user_tz":-330,"elapsed":42,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}}},"source":["def performance(X_test , y_test , final_w):\n","  TN, FN, TP, FP = 0, 0, 0, 0\n","  y_pred = np.dot(X_test, final_w)\n","  y_pred = sigmoid(y_pred)\n","  y_pred[y_pred > 0.5] = 1\n","  y_pred[y_pred <= 0.5] = 0\n","  TP = np.sum(y_pred * y_test)\n","  FP = np.sum(y_pred * (1-y_test))\n","  FN = np.sum((1-y_pred) * y_test)\n","  TN = np.sum((1-y_pred) * (1-y_test))\n","  sensitivity = TP/(TP + FN)\n","  specificity = TN/(TN + FP)\n","  accuracy = (TP + TN)/(TP + TN + FP + FN)\n","  return sensitivity, specificity, accuracy\n"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"_Qm06-PstQ8a","executionInfo":{"status":"ok","timestamp":1634061992700,"user_tz":-330,"elapsed":41,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}}},"source":["#Cost function definition for LOR\n","def cost_func(X,y,w):\n","  hypothesis = sigmoid(np.dot(X,w.T))\n","  J = (-1/len(y))*np.sum(y*np.log(hypothesis) + (1-y)*(np.log(1-hypothesis)))\n","  return J"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"EmdlTWBStXII","executionInfo":{"status":"ok","timestamp":1634062010840,"user_tz":-330,"elapsed":635,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}}},"source":["def BGD(X,y,w,alpha,iters,X_test,y_test):\n","  cost_history = np.zeros(iters)\n","  for i in range(iters):\n","    hypothesis = sigmoid(np.dot(X,w.T))\n","    w = w - (alpha/len(y))*np.dot((hypothesis - y), X)\n","    sensitivity, specificity, accuracy = performance(X_test , y_test , w)\n","  return [sensitivity, specificity, accuracy]"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"m-z3MrdetXFP","executionInfo":{"status":"ok","timestamp":1634062018618,"user_tz":-330,"elapsed":823,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}}},"source":["def MBGD(X,y,w,alpha,iters,batch_size,X_test,y_test):\n","  cost_history = np.zeros(iters)\n","  for i in range(iters):\n","    rand_index = np.random.randint(len(y))\n","    ind_x = X[rand_index:rand_index + batch_size]\n","    ind_y = y[rand_index:rand_index + batch_size]\n","    w = w - (alpha/batch_size)*(ind_x.T.dot(sigmoid(ind_x.dot(w)) - ind_y))\n","  sensitivity, specificity, accuracy = performance(X_test , y_test , w)\n","  return [sensitivity, specificity, accuracy]\n"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"6-6qhmhbtXCq","executionInfo":{"status":"ok","timestamp":1634062020656,"user_tz":-330,"elapsed":5,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}}},"source":["def SGD(X,y,w,alpha,iters,X_test,y_test):\n","  cost_history = np.zeros(iters)\n","  for i in range(iters):\n","    rand_index = np.random.randint(len(y))\n","    ind_x = X[rand_index:rand_index+1]\n","    ind_y = y[rand_index:rand_index+1]\n","    w = w - alpha*(ind_x.T.dot(sigmoid(ind_x.dot(w)) - ind_y))\n","  sensitivity, specificity, accuracy = performance(X_test , y_test , w)\n","  return [sensitivity, specificity, accuracy]\n"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"RiO1eEUJtXAK","executionInfo":{"status":"ok","timestamp":1634062028683,"user_tz":-330,"elapsed":630,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}}},"source":["#cost function for LOR with L2 norm\n","def cost_func(X,y,w,Lambda):\n","  hypothesis = sigmoid(np.dot(X,w.T))\n","  J = (-1/len(y))*np.sum(y*np.log(hypothesis) + (1-y)*(np.log(1-hypothesis))) + (Lambda/(2))\n","  return J"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"BR1Lj7Y_tW9a","executionInfo":{"status":"ok","timestamp":1634062031314,"user_tz":-330,"elapsed":4,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}}},"source":["def BGD_L2(X,y,w,Lambda,alpha,iters,X_test,y_test):\n","  cost_history = np.zeros(iters)\n","  for i in range(iters):\n","    hypothesis = sigmoid(np.dot(X,w.T))\n","    w = w*(1 - alpha*Lambda) - (alpha/len(y))*np.dot((hypothesis - y), X)\n","  sensitivity, specificity, accuracy = performance(X_test , y_test , w)\n","  return [sensitivity, specificity, accuracy]\n"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"asheQKmZt9CZ","executionInfo":{"status":"ok","timestamp":1634062038118,"user_tz":-330,"elapsed":678,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}}},"source":["def MBGD_L2(X,y,w,Lambda,alpha,iters,batch_size,X_test,y_test):\n","  cost_history = np.zeros(iters)\n","  for i in range(iters):\n","    rand_index = np.random.randint(len(y))\n","    ind_x = X[rand_index:rand_index + batch_size]\n","    ind_y = y[rand_index:rand_index + batch_size]\n","    w = w*(1 - alpha*Lambda) - (alpha/batch_size)*(ind_x.T.dot(sigmoid(ind_x.dot(w)) - ind_y))\n","  sensitivity, specificity, accuracy = performance(X_test , y_test , w)\n","  return [sensitivity, specificity, accuracy]\n"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"PHsaTxvIuHUs","executionInfo":{"status":"ok","timestamp":1634062042744,"user_tz":-330,"elapsed":9,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}}},"source":["def SGD_L2(X,y,w,Lambda,alpha,iters,X_test,y_test):\n","  cost_history = np.zeros(iters)\n","  for i in range(iters):\n","    rand_index = np.random.randint(len(y))\n","    ind_x = X[rand_index:rand_index+1]\n","    ind_y = y[rand_index:rand_index+1]\n","    w = w*(1 - alpha*Lambda) - alpha*(ind_x.T.dot(sigmoid(ind_x.dot(w)) - ind_y))\n","  sensitivity, specificity, accuracy = performance(X_test , y_test , w)\n","  return [sensitivity, specificity, accuracy]\n"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"bjxPQtzgwSHQ","executionInfo":{"status":"ok","timestamp":1634062170604,"user_tz":-330,"elapsed":705,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}}},"source":["#cost function for LOR with L1 norm\n","def cost_func_L1(X,y,w,Lambda):\n","  hypothesis = sigmoid(np.dot(X,w.T))\n","  J = (-1/len(y))*np.sum(y*np.log(hypothesis)+(1-y)*(np.log(1-hypothesis))) + (Lambda/(2))\n","  return J"],"execution_count":20,"outputs":[]},{"cell_type":"code","metadata":{"id":"P_R1jGbXwSE8","executionInfo":{"status":"ok","timestamp":1634062203030,"user_tz":-330,"elapsed":722,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}}},"source":["def BGD_L1(X,y,w,Lambda,alpha,iters,X_test,y_test):\n","  cost_history = np.zeros(iters)\n","  for i in range(iters):\n","    hypothesis = sigmoid(np.dot(X,w.T))\n","    w = w - (alpha/len(y))*np.dot((hypothesis - y), X) - (alpha*Lambda*np.sign(w))/(2*len(y))\n","  sensitivity, specificity, accuracy = performance(X_test , y_test , w)\n","  return [sensitivity, specificity, accuracy]"],"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"id":"OqYTfEajwSDU","executionInfo":{"status":"ok","timestamp":1634062222247,"user_tz":-330,"elapsed":8,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}}},"source":["def MBGD_L1(X,y,w,Lambda,alpha,iters,batch_size,X_test,y_test):\n","  cost_history = np.zeros(iters)\n","  for i in range(iters):\n","    rand_index = np.random.randint(len(y))\n","    ind_x = X[rand_index:rand_index + batch_size]\n","    ind_y = y[rand_index:rand_index + batch_size]\n","    w = w - (alpha/batch_size)*(ind_x.T.dot(sigmoid(ind_x.dot(w)) - ind_y)) - (alpha*Lambda)\n","  sensitivity, specificity, accuracy = performance(X_test , y_test , w)\n","  return [sensitivity, specificity, accuracy]"],"execution_count":24,"outputs":[]},{"cell_type":"code","metadata":{"id":"SyYh4bXEwSBZ","executionInfo":{"status":"ok","timestamp":1634062227959,"user_tz":-330,"elapsed":657,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}}},"source":["def SGD_L1(X,y,w,Lambda,alpha,iters,X_test,y_test):\n","  cost_history = np.zeros(iters)\n","  for i in range(iters):\n","    rand_index = np.random.randint(len(y))\n","    ind_x = X[rand_index:rand_index+1]\n","    ind_y = y[rand_index:rand_index+1]\n","    w = w - alpha*(ind_x.T.dot(sigmoid(ind_x.dot(w)) - ind_y)) - (alpha*Lambda*np.sign(w))\n","  sensitivity, specificity, accuracy = performance(X_test , y_test , w)\n","  return [sensitivity, specificity, accuracy]"],"execution_count":25,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":438},"id":"eojXcaQhwR5u","executionInfo":{"status":"ok","timestamp":1634062245024,"user_tz":-330,"elapsed":732,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"ff2d6664-2cf6-4ef4-83d6-b12ba9dd799f"},"source":["data = pd.read_excel('/content/data_q4_q5.xlsx')\n","data"],"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>radius_mean</th>\n","      <th>texture_mean</th>\n","      <th>perimeter_mean</th>\n","      <th>area_mean</th>\n","      <th>smoothness_mean</th>\n","      <th>compactness_mean</th>\n","      <th>concavity_mean</th>\n","      <th>concave points_mean</th>\n","      <th>symmetry_mean</th>\n","      <th>fractal_dimension_mean</th>\n","      <th>radius_se</th>\n","      <th>texture_se</th>\n","      <th>perimeter_se</th>\n","      <th>area_se</th>\n","      <th>smoothness_se</th>\n","      <th>compactness_se</th>\n","      <th>concavity_se</th>\n","      <th>concave points_se</th>\n","      <th>symmetry_se</th>\n","      <th>fractal_dimension_se</th>\n","      <th>radius_worst</th>\n","      <th>texture_worst</th>\n","      <th>perimeter_worst</th>\n","      <th>area_worst</th>\n","      <th>smoothness_worst</th>\n","      <th>compactness_worst</th>\n","      <th>concavity_worst</th>\n","      <th>concave points_worst</th>\n","      <th>symmetry_worst</th>\n","      <th>fractal_dimension_worst</th>\n","      <th>diagnosis</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>17.99</td>\n","      <td>10.38</td>\n","      <td>122.80</td>\n","      <td>1001.0</td>\n","      <td>0.11840</td>\n","      <td>0.27760</td>\n","      <td>0.30010</td>\n","      <td>0.14710</td>\n","      <td>0.2419</td>\n","      <td>0.07871</td>\n","      <td>1.0950</td>\n","      <td>0.9053</td>\n","      <td>8.589</td>\n","      <td>153.40</td>\n","      <td>0.006399</td>\n","      <td>0.04904</td>\n","      <td>0.05373</td>\n","      <td>0.01587</td>\n","      <td>0.03003</td>\n","      <td>0.006193</td>\n","      <td>25.380</td>\n","      <td>17.33</td>\n","      <td>184.60</td>\n","      <td>2019.0</td>\n","      <td>0.16220</td>\n","      <td>0.66560</td>\n","      <td>0.7119</td>\n","      <td>0.2654</td>\n","      <td>0.4601</td>\n","      <td>0.11890</td>\n","      <td>M</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>20.57</td>\n","      <td>17.77</td>\n","      <td>132.90</td>\n","      <td>1326.0</td>\n","      <td>0.08474</td>\n","      <td>0.07864</td>\n","      <td>0.08690</td>\n","      <td>0.07017</td>\n","      <td>0.1812</td>\n","      <td>0.05667</td>\n","      <td>0.5435</td>\n","      <td>0.7339</td>\n","      <td>3.398</td>\n","      <td>74.08</td>\n","      <td>0.005225</td>\n","      <td>0.01308</td>\n","      <td>0.01860</td>\n","      <td>0.01340</td>\n","      <td>0.01389</td>\n","      <td>0.003532</td>\n","      <td>24.990</td>\n","      <td>23.41</td>\n","      <td>158.80</td>\n","      <td>1956.0</td>\n","      <td>0.12380</td>\n","      <td>0.18660</td>\n","      <td>0.2416</td>\n","      <td>0.1860</td>\n","      <td>0.2750</td>\n","      <td>0.08902</td>\n","      <td>M</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>19.69</td>\n","      <td>21.25</td>\n","      <td>130.00</td>\n","      <td>1203.0</td>\n","      <td>0.10960</td>\n","      <td>0.15990</td>\n","      <td>0.19740</td>\n","      <td>0.12790</td>\n","      <td>0.2069</td>\n","      <td>0.05999</td>\n","      <td>0.7456</td>\n","      <td>0.7869</td>\n","      <td>4.585</td>\n","      <td>94.03</td>\n","      <td>0.006150</td>\n","      <td>0.04006</td>\n","      <td>0.03832</td>\n","      <td>0.02058</td>\n","      <td>0.02250</td>\n","      <td>0.004571</td>\n","      <td>23.570</td>\n","      <td>25.53</td>\n","      <td>152.50</td>\n","      <td>1709.0</td>\n","      <td>0.14440</td>\n","      <td>0.42450</td>\n","      <td>0.4504</td>\n","      <td>0.2430</td>\n","      <td>0.3613</td>\n","      <td>0.08758</td>\n","      <td>M</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>11.42</td>\n","      <td>20.38</td>\n","      <td>77.58</td>\n","      <td>386.1</td>\n","      <td>0.14250</td>\n","      <td>0.28390</td>\n","      <td>0.24140</td>\n","      <td>0.10520</td>\n","      <td>0.2597</td>\n","      <td>0.09744</td>\n","      <td>0.4956</td>\n","      <td>1.1560</td>\n","      <td>3.445</td>\n","      <td>27.23</td>\n","      <td>0.009110</td>\n","      <td>0.07458</td>\n","      <td>0.05661</td>\n","      <td>0.01867</td>\n","      <td>0.05963</td>\n","      <td>0.009208</td>\n","      <td>14.910</td>\n","      <td>26.50</td>\n","      <td>98.87</td>\n","      <td>567.7</td>\n","      <td>0.20980</td>\n","      <td>0.86630</td>\n","      <td>0.6869</td>\n","      <td>0.2575</td>\n","      <td>0.6638</td>\n","      <td>0.17300</td>\n","      <td>M</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>20.29</td>\n","      <td>14.34</td>\n","      <td>135.10</td>\n","      <td>1297.0</td>\n","      <td>0.10030</td>\n","      <td>0.13280</td>\n","      <td>0.19800</td>\n","      <td>0.10430</td>\n","      <td>0.1809</td>\n","      <td>0.05883</td>\n","      <td>0.7572</td>\n","      <td>0.7813</td>\n","      <td>5.438</td>\n","      <td>94.44</td>\n","      <td>0.011490</td>\n","      <td>0.02461</td>\n","      <td>0.05688</td>\n","      <td>0.01885</td>\n","      <td>0.01756</td>\n","      <td>0.005115</td>\n","      <td>22.540</td>\n","      <td>16.67</td>\n","      <td>152.20</td>\n","      <td>1575.0</td>\n","      <td>0.13740</td>\n","      <td>0.20500</td>\n","      <td>0.4000</td>\n","      <td>0.1625</td>\n","      <td>0.2364</td>\n","      <td>0.07678</td>\n","      <td>M</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>564</th>\n","      <td>21.56</td>\n","      <td>22.39</td>\n","      <td>142.00</td>\n","      <td>1479.0</td>\n","      <td>0.11100</td>\n","      <td>0.11590</td>\n","      <td>0.24390</td>\n","      <td>0.13890</td>\n","      <td>0.1726</td>\n","      <td>0.05623</td>\n","      <td>1.1760</td>\n","      <td>1.2560</td>\n","      <td>7.673</td>\n","      <td>158.70</td>\n","      <td>0.010300</td>\n","      <td>0.02891</td>\n","      <td>0.05198</td>\n","      <td>0.02454</td>\n","      <td>0.01114</td>\n","      <td>0.004239</td>\n","      <td>25.450</td>\n","      <td>26.40</td>\n","      <td>166.10</td>\n","      <td>2027.0</td>\n","      <td>0.14100</td>\n","      <td>0.21130</td>\n","      <td>0.4107</td>\n","      <td>0.2216</td>\n","      <td>0.2060</td>\n","      <td>0.07115</td>\n","      <td>M</td>\n","    </tr>\n","    <tr>\n","      <th>565</th>\n","      <td>20.13</td>\n","      <td>28.25</td>\n","      <td>131.20</td>\n","      <td>1261.0</td>\n","      <td>0.09780</td>\n","      <td>0.10340</td>\n","      <td>0.14400</td>\n","      <td>0.09791</td>\n","      <td>0.1752</td>\n","      <td>0.05533</td>\n","      <td>0.7655</td>\n","      <td>2.4630</td>\n","      <td>5.203</td>\n","      <td>99.04</td>\n","      <td>0.005769</td>\n","      <td>0.02423</td>\n","      <td>0.03950</td>\n","      <td>0.01678</td>\n","      <td>0.01898</td>\n","      <td>0.002498</td>\n","      <td>23.690</td>\n","      <td>38.25</td>\n","      <td>155.00</td>\n","      <td>1731.0</td>\n","      <td>0.11660</td>\n","      <td>0.19220</td>\n","      <td>0.3215</td>\n","      <td>0.1628</td>\n","      <td>0.2572</td>\n","      <td>0.06637</td>\n","      <td>M</td>\n","    </tr>\n","    <tr>\n","      <th>566</th>\n","      <td>16.60</td>\n","      <td>28.08</td>\n","      <td>108.30</td>\n","      <td>858.1</td>\n","      <td>0.08455</td>\n","      <td>0.10230</td>\n","      <td>0.09251</td>\n","      <td>0.05302</td>\n","      <td>0.1590</td>\n","      <td>0.05648</td>\n","      <td>0.4564</td>\n","      <td>1.0750</td>\n","      <td>3.425</td>\n","      <td>48.55</td>\n","      <td>0.005903</td>\n","      <td>0.03731</td>\n","      <td>0.04730</td>\n","      <td>0.01557</td>\n","      <td>0.01318</td>\n","      <td>0.003892</td>\n","      <td>18.980</td>\n","      <td>34.12</td>\n","      <td>126.70</td>\n","      <td>1124.0</td>\n","      <td>0.11390</td>\n","      <td>0.30940</td>\n","      <td>0.3403</td>\n","      <td>0.1418</td>\n","      <td>0.2218</td>\n","      <td>0.07820</td>\n","      <td>M</td>\n","    </tr>\n","    <tr>\n","      <th>567</th>\n","      <td>20.60</td>\n","      <td>29.33</td>\n","      <td>140.10</td>\n","      <td>1265.0</td>\n","      <td>0.11780</td>\n","      <td>0.27700</td>\n","      <td>0.35140</td>\n","      <td>0.15200</td>\n","      <td>0.2397</td>\n","      <td>0.07016</td>\n","      <td>0.7260</td>\n","      <td>1.5950</td>\n","      <td>5.772</td>\n","      <td>86.22</td>\n","      <td>0.006522</td>\n","      <td>0.06158</td>\n","      <td>0.07117</td>\n","      <td>0.01664</td>\n","      <td>0.02324</td>\n","      <td>0.006185</td>\n","      <td>25.740</td>\n","      <td>39.42</td>\n","      <td>184.60</td>\n","      <td>1821.0</td>\n","      <td>0.16500</td>\n","      <td>0.86810</td>\n","      <td>0.9387</td>\n","      <td>0.2650</td>\n","      <td>0.4087</td>\n","      <td>0.12400</td>\n","      <td>M</td>\n","    </tr>\n","    <tr>\n","      <th>568</th>\n","      <td>7.76</td>\n","      <td>24.54</td>\n","      <td>47.92</td>\n","      <td>181.0</td>\n","      <td>0.05263</td>\n","      <td>0.04362</td>\n","      <td>0.00000</td>\n","      <td>0.00000</td>\n","      <td>0.1587</td>\n","      <td>0.05884</td>\n","      <td>0.3857</td>\n","      <td>1.4280</td>\n","      <td>2.548</td>\n","      <td>19.15</td>\n","      <td>0.007189</td>\n","      <td>0.00466</td>\n","      <td>0.00000</td>\n","      <td>0.00000</td>\n","      <td>0.02676</td>\n","      <td>0.002783</td>\n","      <td>9.456</td>\n","      <td>30.37</td>\n","      <td>59.16</td>\n","      <td>268.6</td>\n","      <td>0.08996</td>\n","      <td>0.06444</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0.2871</td>\n","      <td>0.07039</td>\n","      <td>B</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>569 rows × 31 columns</p>\n","</div>"],"text/plain":["     radius_mean  texture_mean  ...  fractal_dimension_worst  diagnosis\n","0          17.99         10.38  ...                  0.11890          M\n","1          20.57         17.77  ...                  0.08902          M\n","2          19.69         21.25  ...                  0.08758          M\n","3          11.42         20.38  ...                  0.17300          M\n","4          20.29         14.34  ...                  0.07678          M\n","..           ...           ...  ...                      ...        ...\n","564        21.56         22.39  ...                  0.07115          M\n","565        20.13         28.25  ...                  0.06637          M\n","566        16.60         28.08  ...                  0.07820          M\n","567        20.60         29.33  ...                  0.12400          M\n","568         7.76         24.54  ...                  0.07039          B\n","\n","[569 rows x 31 columns]"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m7T6FP3QwR2-","executionInfo":{"status":"ok","timestamp":1634062249376,"user_tz":-330,"elapsed":14,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"544f3950-1374-40e3-ee80-d0e1a18f734c"},"source":["datan = data.values\n","X = datan[ : , 0:30]\n","y = datan[:,30]\n","for i in range(len(y)):\n","    if y[i] == \"M\":\n","      y[i] = 1\n","    else:\n","      y[i] = 0\n","print(y)"],"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"," 0 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 1 1 0 1 1 0 0 0 0 1 0 1 1 0 0 0 0 1 0 1 1\n"," 0 1 0 1 1 0 0 0 1 1 0 1 1 1 0 0 0 1 0 0 1 1 0 0 0 1 1 0 0 0 0 1 0 0 1 0 0\n"," 0 0 0 0 0 0 1 1 1 0 1 1 0 0 0 1 1 0 1 0 1 1 0 1 1 0 0 1 0 0 1 0 0 0 0 1 0\n"," 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 1 0 0 1 1 0 0 1 1 0 0 0 0 1 0 0 1 1 1 0 1\n"," 0 1 0 0 0 1 0 0 1 1 0 1 1 1 1 0 1 1 1 0 1 0 1 0 0 1 0 1 1 1 1 0 0 1 1 0 0\n"," 0 1 0 0 0 0 0 1 1 0 0 1 0 0 1 1 0 1 0 0 0 0 1 0 0 0 0 0 1 0 1 1 1 1 1 1 1\n"," 1 1 1 1 1 1 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0\n"," 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 1 1 1 0 0\n"," 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1\n"," 1 0 1 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0\n"," 0 1 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0\n"," 1 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0\n"," 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 1 1 0 1 0 1 0 0 0 0 0 1 0 0 1 0 1 0 1 1\n"," 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n"," 0 0 0 0 0 0 0 1 1 1 1 1 1 0]\n"]}]},{"cell_type":"code","metadata":{"id":"HmryhZlQwR0Z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1634062287355,"user_tz":-330,"elapsed":13369,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"a70865bf-02b9-4243-a7ac-78912f4f462e"},"source":["bgd = np.zeros(3)\n","sgd = np.zeros(3)\n","mbgd = np.zeros(3)\n","bgd_L2 = np.zeros(3)\n","sgd_L2 = np.zeros(3)\n","mbgd_L2 = np.zeros(3)\n","bgd_L1 = np.zeros(3)\n","sgd_L1 = np.zeros(3)\n","mbgd_L1 = np.zeros(3)\n","kf = KFold(n_splits = 5)\n","kf.get_n_splits(X)\n","print(kf)\n","for train_index , test_index in kf.split(X):\n","  X_train , X_test = X[train_index] , X[test_index]\n","  y_train , y_test = y[train_index] , y[test_index]\n","  #Normalization of features\n","  xmin = np.min(X_train, axis = 0)\n","  xmax = np.max(X_train, axis = 0)\n","  X_train = (X_train - xmin)/(xmax-xmin)\n","  X_test = (X_test - xmin)/(xmax-xmin)\n","  m_train = X_train.shape[0]\n","  m_test = X_test.shape[0]\n","  X_train = np.append(np.ones([m_train,1]),X_train,axis = 1)\n","  X_test = np.append(np.ones([m_test,1]),X_test,axis = 1)\n","  w = np.zeros(X_train.shape[1])\n","  bgd = bgd + BGD(X_train,y_train, w , 0.005 , 1000, X_test, y_test)\n","  sgd = sgd + SGD(X_train,y_train, w , 0.01 , 1500, X_test, y_test)\n","  mbgd = mbgd + MBGD(X_train,y_train, w , 0.01, 1500 , 50, X_test, y_test)\n","  bgd_L2 = bgd_L2 + BGD_L2(X_train,y_train,w , 1, 0.005 , 1000 , X_test, y_test)\n","  sgd_L2 = sgd_L2 + SGD_L2(X_train,y_train,w, 1 , 0.01 , 1500, X_test, y_test)\n","  mbgd_L2 = mbgd_L2 + MBGD_L2(X_train,y_train,w, 1 , 0.01 , 1500, 50, X_test, y_test)\n","  bgd_L1 = bgd_L1 + BGD_L1(X_train,y_train,w, 1 , 0.005 , 1000, X_test, y_test)\n","  sgd_L1 = sgd_L1 + SGD_L1(X_train,y_train,w, 1 , 0.01, 1500, X_test, y_test)\n","  mbgd_L1 = mbgd_L1 + MBGD_L1(X_train,y_train,w, 1 , 0.01 , 1500, 50, X_test, y_test)\n"],"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["KFold(n_splits=5, random_state=None, shuffle=False)\n"]}]},{"cell_type":"code","metadata":{"id":"54ef5O6owRxj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1634062287357,"user_tz":-330,"elapsed":11,"user":{"displayName":"MUSKAN KHANNA","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14503783361471552212"}},"outputId":"a5791e1a-86a9-4b0e-ff67-9a2ae076f544"},"source":["print(bgd/5)\n","print(sgd/5)\n","print(mbgd/5)\n","print(bgd_L2/5)\n","print(sgd_L2/5)\n","print(mbgd_L2/5)\n","print(bgd_L1/5)\n","print(sgd_L1/5)\n","print(mbgd_L1/5)"],"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.64798038 0.9862069  0.81568079]\n","[0.76144027 0.98269075 0.87886974]\n","[0.71839685 0.99770115 0.8718522 ]\n","[0.50977833 0.97241379 0.74542773]\n","[0.72245683 0.86227467 0.76132588]\n","[0.29257294 1.         0.69816799]\n","[0.64979033 0.98850575 0.81571185]\n","[0.6        0.4        0.43198261]\n","[0.         1.         0.62766651]\n"]}]}]}